Each Promise is created using the constructor which takes in a function as an argument with 2 variables => resolve and reject.
Async functions have callback functions which are called after the given task is completed.
When we resolve a promise it's state is made from pending to resolved and the then function can be called later.
Async functions need callbacks in the arguments. If we still dont know the manipulations to be performed after the function execution is completed I cannot write the callback function.
Promises saves us from this by providing us the option to give it a callback function after completion using then.
In .then we can just specify the function name and the variable resolved is passed to that function. If this function returns a promise then we can use then on that.
In promises, catch can be added in the end and can handle the errors in any promise in the promise chain.
When set timeout is called the program prepares the functions ahead of it and comesback after the set timeout is complete.
In promise.all promises run parrallely using promise.all.
If an error comes in promise.all, means if even a single promise rejects it would prevent the then function from being called.
