alert blocks the further rendering of the page. 
If a source exists in script tag it's inside script is not loaded. 
Script is a 2 sided tag.
async - script reading (downloading) and rendering takes place simultaenously. good for slow internet connections.
defer - execute the script after the rendering has taken place.
In JS a single line is read and executed first. "interprated scripting language"
let is common for any variable unlike java where you have to specify the type and then followed by value of that type.

Strongly typed language vs weakly typed language :
Restriction on data type is on the variable not on the value which defines the strongness or weakness of a language.
Strongly - java, c++.
weakly - 
Object x = 10;
x = "akshit";
the above code works in java so how is it strongly typed language?
Similarly if we take a void pointer in  c++ we can achieve the abve thing too which might make it weak too.
We have the choice to use the language weakly. Java has the option to be written strongly and weekly we can choose in between mmaking it strong.

Statically typed language vs dynamically typed language :
Some languages are compiled and some are not. 
Statically have a compiling step to check for errors relateed to data type checking.
JS is not static.
Javascript falls into a bucket of weak dynamically typed language. 

Day 2: 
Javascript has a data type function which enables us to treat functions as a variable.
String and character are stored as string in js. single or double always strings.
Integer and float are stored as data type number.
Properties of functions: 
interprator reads all the lines first and then executes. 
function definations are put at the top while running which is known as hoisting
lines to be executed are put in a queue. and after reading the file that queue is executed.
without hoisting performance would increase. But it would make it difficult to write code.
if a function or variable is defined using let then it cannot be used before the function defination.
let, const is the new introduction so it should be promoted for the use. Var is the older way.
Polymorphism : 
Function needs to be defined once and the logic can be changed according to the use.
undefined acts as a false case for an if condition which helps us in Polymorphism.
Passing 2 arguments in a function requiring one parameter is also fine. We can still access the second parameter in the second function.
arguments is not a keyword it gets created in every function. it is an array.
thus functions can be created without any actual arguments. and can be handeled using the arguments array.
either we can call functions in js or we can pass just the name and call that function in the js.

variables :
variables can be defined without var or let. They are global variables.
var - variables inside functions scope. if a variable is declared inside a block (if statement)
it will run outside that if block too but not outside the function.
let - block scope variables.
functions defined using keyword function are hoisted and other declarations are not.
arrays :
array.push to add
array.pop to remove last element returns and removes
arr.indexOf(element) for index - linear search.
arr.shift - remove first
arr.unshift - add first

OOPS in javascript :
var with Properties.
for each(val,idx) for iteration of list.
use this to refer to the current object and use it for the functions inside the object.
2 ways to create json :
creating a constructor and using this keyword.
or using key keyword.
we can map variable to a class.
classes are not hoisted.
substring and slice appear to do the same thing but there is a slite difference.
slice is always done to the start side to end. right to left.
substr - start index and length. supports negative numbers as well.
escape character using \
arrays can store different types of data in them.
for of floops for iteration. value
for in loops for iteration. index
slice is undistructible in nature. after slicing the array is not changed.
splice returns the removed part. second optional argument is the number of items.
splice can also change the data inside.


Closure - how to use things that seem to be out of the scope.
window is the most global scope
whenever a function is born whatever the scopes were available at the birth place of the function
those scopes are available throughout the life of the function.
The above lines define what closer scope are.
variables can be shadowed inside the inner functions of Closure.
in the case of shadowing the outer defination will be undefined since it will be inaccessible.
arguments keyword is not captured in closure scope.

NEVER THINK OF RELATING ONE LANGUAGE TO OTHER. ALL THE LANGUAGES ARE MADE WITH DIFFERENT CONCERNS. 
EXPLORE!!!!!!

Closures dont have any performance issues. But the variables need to be free once used otherwise the ram usage will increase.


This:
For languages other than JS :Only used in non static methods of a class. Because static methods dont belong to any object of the class.
In js this works without any class.
two modes strict and non strict
this points to the place where the function is called. points to the nearest scope available.
if a function is inside an object this points to the object itself.
this in js is bound in runtime.
when the function is run js compiler checks if called with js object this points to the object else to window.
this works differently on browser and node.
right now we are talking about browser.

No string pool in js like java. JS interprators depend on the browser.

Dollar sign templates/string literals :- 
int ${} we can write any js expression which will get evaluated.
Inheritance in js :
Object.create for new object
sameness and equality :
== value
=== type and value
\n and \t are equal to 0. any empty space when converted into a number is 0
javascript is a pass by value language but some places have that value as reference.
if any 2 var a and b of type object. if they come equal that means they have the same refernce.
otherwise it would output false.
Prototyoe based Inheritance:
__proto__ for debugging inside the console not for production.
at the time of read the logic is followed and not at the write time.
obj2.a->try to  find a in obj2
if not found
try to find it in obj2.__proto__
try to find it in obj2.__proto__.__proto__
this chain goes on


OOPS Day :
all the capital data types are of type functions.
Javascript Polymorphism is on the basis of some if else statements.
In a browser window is the global scope
obj is 2 level away from null
string number boolean are 3 levels away from null.
array is also 3 level away from null, same for function.
Everything is directly inherited from the same thing that the object is inherited from.
In javascript Everything is essentially an Object.
String.__proto__ inherites from Object.Prototype
How does .Prototype exists if Number or String are a function?
Answer : functions are also objects in java that's why .Prototype exists
If there are 2 objects with same proto it is not neccessary there type of will be same.
object.create establishes an object always!!
Number.__proto__ is the hidden pointer which points to the blueprint from which number is made.
Number.Prototype points to the model which was responsible for creating a number.
Object oriented nature in js is driven using Prototype.
If we change the function defination of charAt in String.Prototype then it will override the defination of charAt.
String.Prototype conatains all default string functions like charAt, indexOf, substring, slice, etc


Javascript Classes : 
Classes are syntactical sugar over the existing Prototype based Inheritance.
Classes are implemented as functions
variable of a class is inherited from it's class which is inherited from object
In classes we dont need function keyword because only functions and constructor can be made inside a class
no access modifiers available in js because these are not actual classes like java and c++ classes
must call super constructor before calling this. very important
no Inheritance between the classes actually they are functions derived from preivous one.
class names in capital function name in small. (Convention to be followed)
